---
- name: Add Hashicorp Helm repository
  kubernetes.core.helm_repository:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    url: https://helm.releases.hashicorp.com
    name: hashicorp

- name: Install Vault chart
  kubernetes.core.helm:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    chart_ref: hashicorp/vault
    release_namespace: vault
    name: vault
    create_namespace: true
    wait: true
    values:
      auditStorage:
        enabled: true
      tlsDisable: false
      certs:
        secretName: vault-tls
        caBundle: ca-bundle-ipa
      injector:
        enabled: true
        image:
          repository: "hashicorp/vault-k8s"
          tag: "latest"
      ui:
        enabled: true
        serviceType: "LoadBalancer"
        serviceNodePort: null
        externalPort: 8200

- name: Create Ingress for Vault
  kubernetes.core.k8s:
    apply: true
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    wait: true
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: vault-ingress
        namespace: vault
        annotations:
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          cert-manager.io/cluster-issuer: internal-acme-issuer
          external-dns.alpha.kubernetes.io/hostname: vault.{{ k3s_zone }}
      spec:
        ingressClassName: nginx
        rules:
          - host: vault.{{ k3s_zone }}
            http:
              paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: vault-ui
                      port:
                        number: 8200
        tls:
          - hosts:
              - vault.{{ k3s_zone }}
            secretName: vault-tls

- name: Initialize Vault
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    namespace: vault
    pod: vault-0
    command: vault operator init
  register: vault_operator_init
  failed_when: vault_operator_init.rc not in [ 0, 2 ]
  retries: 12
  delay: 5
  until: vault_operator_init is not failed

- name: Save unseal vault keys and root token
  ansible.builtin.copy:
    dest: "{{ homelab_data_path }}/passwords/vault_unseal_keys"
    mode: "0600"
    backup: true
    content: "{{ vault_operator_init.stdout }}"
  when: vault_operator_init.rc == 0

- name: Save root token again in its own file
  ansible.builtin.copy:
    dest: "{{ homelab_data_path }}/passwords/vault_root_token"
    mode: "0600"
    backup: true
    content: "{{ vault_operator_init.stdout | regex_search('^Initial Root Token: (.*)$', '\\1', multiline=true) | first }}"
  when: vault_operator_init.rc == 0

- name: Get unseal keys from file
  ansible.builtin.slurp:
    path: "{{ homelab_data_path }}/passwords/vault_unseal_keys"
  register: unseal_keys_b64

- name: Get root token from file
  ansible.builtin.slurp:
    path: "{{ homelab_data_path }}/passwords/vault_root_token"
  register: vault_token_b64

- name: Decode root token
  ansible.builtin.set_fact:
    vault_token: "{{ vault_token_b64.content | b64decode }}"

- name: Unseal vault
  ansible.builtin.command:
    cmd: "vault operator unseal {{ item | regex_search('^Unseal Key [0-9]: (.*)', '\\1') | first }}"
  environment:
    VAULT_ADDR: https://vault.{{ k3s_zone }}
    VAULT_TOKEN: "{{ vault_token }}"
    VAULT_SKIP_VERIFY: "True"
  register: vault_kubernetes_unseal
  loop: "{{ unseal_keys_b64.content | b64decode | split('\n') | batch(3) | first }}"
  changed_when: vault_kubernetes_unseal.rc == 0
  failed_when: vault_kubernetes_unseal.rc not in [ 0, 2 ]

- name: Enable Kubernetes auth method
  ansible.builtin.command:
    cmd: vault auth enable -path k3s kubernetes
  environment:
    VAULT_ADDR: https://vault.{{ k3s_zone }}
    VAULT_TOKEN: "{{ vault_token }}"
    VAULT_SKIP_VERIFY: "True"
  register: vault_kubernetes_auth_init
  failed_when: vault_kubernetes_auth_init.rc not in [ 0, 2 ]
  changed_when: vault_kubernetes_auth_init.rc == 0

- name: Write k3s auth config
  community.hashi_vault.vault_write:
    url: https://vault.{{ k3s_zone }}
    token: "{{ vault_token }}"
    validate_certs: false
    path: auth/k3s/config
    data:
      kubernetes_host: https://{{ hostvars[groups['servers'][0]]['ansible_host'] }}:6443

- name: Enable kv-v2 secret engine
  ansible.builtin.command:
    cmd: vault secrets enable -path=kvv2 kv-v2
  environment:
    VAULT_ADDR: https://vault.{{ k3s_zone }}
    VAULT_TOKEN: "{{ vault_token }}"
    VAULT_SKIP_VERIFY: "True"
  register: vault_kubernetes_auth_init
  failed_when: vault_kubernetes_auth_init.rc not in [ 0, 2 ]
  changed_when: vault_kubernetes_auth_init.rc == 0

- name: Get IPA CA from k3s server that joined FreeIPA
  ansible.builtin.slurp:
    src: "/etc/ssl/certs/{{ ipaserver_realm }}_IPA_CA.pem"
  register: ipa_ca
  delegate_to: "{{ groups['kubernetes'][0] }}"

- name: Import FreeIPA root cert
  kubernetes.core.k8s:
    apply: true
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: ca-bundle-ipa
        namespace: vault-secrets-operator-system
      data:
        ca.crt: "{{ ipa_ca.content }}"

- name: Install Vault secrets operator
  kubernetes.core.helm:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    name: vault-secrets-operator
    namespace: vault-secrets-operator-system
    create_namespace: true
    chart_ref: hashicorp/vault-secrets-operator
    values:
      defaultVaultConnection:
        enabled: true
        address: https://vault.{{ k3s_zone }}
        skipTLSVerify: false
        caCertSecret: ca-bundle-ipa
