---
- name: Create keycloak namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    name: keycloak
    kind: Namespace
    api_version: v1
    state: present

- name: Create Ingress and TLS certificate for Keycloak
  kubernetes.core.k8s:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: keycloak-server-ingress
        namespace: keycloak
        annotations:
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          cert-manager.io/cluster-issuer: internal-acme-issuer
          external-dns.alpha.kubernetes.io/hostname: keycloak.{{ k3s_zone }}
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      spec:
        ingressClassName: "nginx"
        rules:
          - host: keycloak.{{ k3s_zone }}
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: keycloak
                      port:
                        name: https
        tls:
          - hosts:
              - keycloak.{{ k3s_zone }}
            secretName: keycloak-tls-cert

- name: Check if the Keycloak Admin password already exists
  ansible.builtin.set_fact:
    keycloak_admin_pwd: "{{ lookup('community.hashi_vault.hashi_vault',
                                      'secret=kvv2/data/keycloak/admin_password validate_certs=False') }}"
  register: check_keycloak_admin_password
  ignore_errors: true

- name: Generate a new Keycloak Admin password
  community.hashi_vault.vault_kv2_write:
    token: "{{ ansible_hashi_vault_token }}"
    url: https://vault.{{ k3s_zone }}
    validate_certs: false
    path: keycloak/admin_password
    engine_mount_point: "kvv2"
    data:
      pwd: "{{ lookup('community.general.random_string', length=20, special=false) }}"
  when: check_keycloak_admin_password is failed

- name: Check if the Keycloak postgres password already exists
  ansible.builtin.set_fact:
    keycloak_postgres_pwd: "{{ lookup('community.hashi_vault.hashi_vault',
                                      'secret=kvv2/data/keycloak/postgres_password validate_certs=False') }}"
  register: check_keycloak_postgres_password
  ignore_errors: true

- name: Generate a new Keycloak PostgreSQL password
  when: check_keycloak_postgres_password is failed
  block:
    - name: Generate Keycloak postgres password
      ansible.builtin.set_fact:
        keycloak_postgres_pwd_new: "{{ lookup('community.general.random_string', length=20, special=false) }}"

    - name: Create Keycloak postgres password on Vault
      community.hashi_vault.vault_kv2_write:
        token: "{{ ansible_hashi_vault_token }}"
        url: https://vault.{{ k3s_zone }}
        validate_certs: false
        path: keycloak/postgres_password
        engine_mount_point: "kvv2"
        data:
          password: "{{ keycloak_postgres_pwd_new }}"
          postgres-password: "{{ keycloak_postgres_pwd_new }}"

- name: Create read-only policy to access Keycloak secrets
  ansible.builtin.command:
    cmd: vault policy write keycloak-read-only -
    stdin: |-
      path "kvv2/*" {
        capabilities = ["read"]
      }
  environment:
    VAULT_ADDR: https://vault.{{ k3s_zone }}
    VAULT_TOKEN: "{{ ansible_hashi_vault_token }}"
    VAULT_SKIP_VERIFY: "True"
  register: vault_kubernetes_auth_init
  failed_when: vault_kubernetes_auth_init.rc not in [ 0, 2 ]
  changed_when: vault_kubernetes_auth_init.rc == 0

- name: Create role to access the Keycloak secrets on Vault
  community.hashi_vault.vault_write:
    token: "{{ ansible_hashi_vault_token }}"
    url: https://vault.{{ k3s_zone }}
    validate_certs: false
    path: auth/k3s/role/keycloak-secret-reader
    data:
      bound_service_account_names: keycloak-service-account
      bound_service_account_namespaces: keycloak
      policies: keycloak-read-only
      audience: vault
      ttl: 24h

- name: Tie the Keycloak service account to VaultAuth
  kubernetes.core.k8s:
    kubeconfig: "{{ homelab_data_path }}/kubeconfig"
    definition:
      apiVersion: secrets.hashicorp.com/v1beta1
      kind: VaultAuth
      metadata:
        name: static-auth-keycloak
        namespace: keycloak
      spec:
        method: kubernetes
        mount: k3s
        kubernetes:
          role: keycloak-secret-reader
          serviceAccount: keycloak-service-account
          audiences:
            - vault
